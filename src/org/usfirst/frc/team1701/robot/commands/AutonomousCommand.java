// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.commands;

import org.usfirst.frc.team1701.robot.Robot;
import org.usfirst.frc.team1701.robot.RobotMap;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends Command {
	private final double DRIVE_FORWARD_DISTANCE = 105.0; // enough to cross the
															// baseline (tested
															// to be 95)
	// reversed 3/4 at Southfield after round 63
	// I don't know why we need to
	private final double AUTO_DRIVE_SPEED = -.6;
	private final double AUTO_TURN_SPEED = .3;
	private boolean isFinished = false;
	private int currentState;
	private NetworkTable visionTable;
	private boolean turnLeft = false;
	private int autonomousMode;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutonomousCommand() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.driveTrain.resetLeftEncoder();
		Robot.driveTrain.resetRightEncoder();
		currentState = 1;
		NetworkTable.setTeam(1701);
		visionTable = NetworkTable.getTable("vision");
		RobotMap.navx.reset();
		autonomousMode = (int) SmartDashboard.getNumber("Autonomous Mode: ", 0);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		// SmartDashboard.putNumber("Actual Autonomous Mode: ", autonomousMode);
		Robot.lights.getTargetingLED().set(Relay.Value.kOn);

		int size;
		boolean gearTargetFound = false;

		try {
			size = (int) visionTable.getNumber("possibleGoalSize", -1);
			gearTargetFound = visionTable.getBoolean("gearTargetFound", false);
		} catch (Exception e) {
			size = -1;
		}

		if (gearTargetFound) {//check to see if the below code is true
			if (Robot.lights.getLED2().get() == Relay.Value.kReverse //find out if light B is on or not
					|| Robot.lights.getLED2().get() == Relay.Value.kOn) {//find out if both light A and B are on
				Robot.lights.getLED2().set(Relay.Value.kOn); //if either of the above statements are true, turn on both light A and B
			} else
				Robot.lights.getLED2().set(Relay.Value.kForward);
		}

		// asdlfkjhasdlkfjhasd

		SmartDashboard.putNumber("Current State", currentState);
		SmartDashboard.putNumber("Left Encoder Reading: ", Robot.driveTrain.getLeftDistance());
		SmartDashboard.putNumber("Right Encoder Reading: ", Robot.driveTrain.getRightDistance());
		// SmartDashboard.putNumber("Navx Reading: ", RobotMap.navx.getYaw());
		SmartDashboard.putNumber("Number of Possible Goal Targets (should be 2): ", size);

		switch (autonomousMode) {
		// case 1:
		// autoGear();
		// break;
		// case 2:
		// autoHighShot();
		// break;
		default:
			forwardsAndStop();
			break;
		}
	}

	private void driveForward() {
		RobotMap.driveTrainRM.arcadeDrive(AUTO_DRIVE_SPEED, 0);
	}

	private void driveBackwards() {
		Robot.driveTrain.leftDriveControl(AUTO_DRIVE_SPEED);
		Robot.driveTrain.rightDriveControl(AUTO_DRIVE_SPEED);
	}

	private void forwardsAndStop() {
		switch (currentState) {
		case 0: // DONE
			isFinished = true;
			break;
		case 1: // DRIVING_FORWARD
			if (Robot.driveTrain.getLeftDistance() < DRIVE_FORWARD_DISTANCE
					&& Robot.driveTrain.getRightDistance() < DRIVE_FORWARD_DISTANCE) {
				driveForward();
			} else {
				RobotMap.navx.reset();
				// currentState++;
			}
			break;
		}
	}

	private void autoGear() {
		boolean gearTargetFound;
		gearTargetFound = visionTable.getBoolean("gearTargetFound", false);

		switch (currentState) {
		case 0: // DONE
			isFinished = true;
			break;
		case 1: // DRIVING_FORWARD
			if (Robot.driveTrain.getLeftDistance() < DRIVE_FORWARD_DISTANCE
					&& Robot.driveTrain.getRightDistance() < DRIVE_FORWARD_DISTANCE) {
				driveForward();
			} else {
				RobotMap.navx.reset();
				currentState++;
			}
			break;
		case 2: // TURNING AROUND
			if (RobotMap.navx.getYaw() < 170 && RobotMap.navx.getYaw() > -170) {
				Robot.driveTrain.leftDriveControl(AUTO_TURN_SPEED);
				Robot.driveTrain.rightDriveControl(AUTO_TURN_SPEED);
			} else {
				RobotMap.navx.reset();
				currentState++;
			}
			break;
		case 3: // SWEEPING
			if (gearTargetFound) {
				Robot.driveTrain.leftDriveControl(0);
				Robot.driveTrain.rightDriveControl(0);
				currentState++;
			} else {
				if (turnLeft) {
					Robot.driveTrain.leftDriveControl(AUTO_TURN_SPEED);
					Robot.driveTrain.rightDriveControl(-AUTO_TURN_SPEED);
				} else {
					Robot.driveTrain.leftDriveControl(-AUTO_TURN_SPEED);
					Robot.driveTrain.rightDriveControl(AUTO_TURN_SPEED);
				}
				if (RobotMap.navx.getYaw() > 30 || RobotMap.navx.getYaw() < -30) {
					if (turnLeft) {
						turnLeft = false;
					} else {
						turnLeft = true;
					}
				}

			}
			break;
		case 4: // AUTO_GEAR_1
			Command autoGear = new RunAutoGear();
			Scheduler.getInstance().add(autoGear);
			currentState++;
			break;
		case 5: // AUTO_GEAR_2
			// Do nothing. RunAutoGear will handle the rest.
			break;
		}
	}

	private void autoHighShot() {

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return isFinished;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
